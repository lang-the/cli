name: Deploy Packages

on:
  workflow_dispatch:
  push:
    paths: ['.github/workflows/deploy-packages.yml']

env:
  openssl_args: no-dso no-shared no-tests no-threads --libdir=lib

jobs:
  build-osxcross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: tpoechtrager/osxcross
          path:
      - run: sudo apt-get update
      - run: sudo apt-get install libxml2-dev llvm-dev lzma-dev
      - run: curl -fsSL https://cdn.thelang.io/MacOSX12.3.sdk.tar.xz -o tarballs/MacOSX12.3.sdk.tar.xz
      - run: TARGET_DIR="$PWD/the/osxcross" UNATTENDED=1 ./build.sh
      - run: tar -czf build-osxcross.tar.gz osxcross -C the
      - uses: actions/upload-artifact@v3
        with:
          name: build-osxcross
          path: build-osxcross.tar.gz
  build-cross-compile-macos:
    needs: build-osxcross
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-3.0.7
      - uses: actions/download-artifact@v3
        with:
          name: build-osxcross
      - run: mkdir -p the
      - run: tar -xzf build-osxcross.tar.gz -C the
      - run: echo "$PWD/the/osxcross/bin" >> $GITHUB_PATH
      - run: CC=clang perl Configure darwin64-x86_64 --cross-compile-prefix=x86_64-apple-darwin21.4- --prefix="$PWD/build" ${{ env.openssl_args }}
      - run: perl configdata.pm --dump
      - run: make -j4
      - run: make install_sw
      - run: tar -czf build-cross-compile-macos.tar.gz build
      - uses: actions/upload-artifact@v3
        with:
          name: build-cross-compile-macos
          path: build-cross-compile-macos.tar.gz
  build-cross-compile-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-3.0.7
      - run: sudo apt-get update
      - run: sudo apt-get install build-essential mingw-w64
      - run: perl Configure mingw64 --cross-compile-prefix=x86_64-w64-mingw32- --prefix="$PWD/build" ${{ env.openssl_args }}
      - run: perl configdata.pm --dump
      - run: make -j4
      - run: make install_sw
      - run: tar -czf build-cross-compile-windows.tar.gz build
      - uses: actions/upload-artifact@v3
        with:
          name: build-cross-compile-windows
          path: build-cross-compile-windows.tar.gz
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-3.0.7
      - run: CC=clang perl Configure --prefix="$PWD/build" ${{ env.openssl_args }}
      - run: perl configdata.pm --dump
      - run: make -j4
      - run: make install_sw
      - run: tar -czf build-linux.tar.gz build
      - uses: actions/upload-artifact@v3
        with:
          name: build-linux
          path: build-linux.tar.gz
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-3.0.7
      - run: CC=clang perl Configure --prefix="$PWD/build" ${{ env.openssl_args }}
      - run: perl configdata.pm --dump
      - run: make -j4
      - run: make install_sw
      - run: tar -czf build-macos.tar.gz build
      - uses: actions/upload-artifact@v3
        with:
          name: build-macos
          path: build-macos.tar.gz
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: openssl/openssl
          ref: openssl-3.0.7
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: ilammy/setup-nasm@v1
      - run: perl Configure VC-WIN64A --prefix="$PWD/build" ${{ env.openssl_args }}
      - run: perl configdata.pm --dump
      - run: nmake
      - run: nmake install_sw
      - run: tar -czf build-windows.tar.gz build
      - uses: actions/upload-artifact@v3
        with:
          name: build-windows
          path: build-windows.tar.gz
  deploy:
    needs: [build-osxcross, build-cross-compile-macos, build-cross-compile-windows, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - run: tar -xzf build-osxcross.tar.gz -C the
      - run: tar -xzf build-cross-compile-macos.tar.gz -C the/cross-compile/macos --strip-components=1
      - run: tar -xzf build-linux.tar.gz -C the/cross-compile/linux --strip-components=1
      - run: tar -xzf build-cross-compile-windows.tar.gz -C the/cross-compile/windows --strip-components=1
      - run: tar -xzf build-macos.tar.gz -C the/native/macos --strip-components=1
      - run: tar -xzf build-linux.tar.gz -C the/native/linux --strip-components=1
      - run: tar -xzf build-windows.tar.gz -C the/native/windows --strip-components=1
      - run: tar -czf packages.tar.gz the
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: aws s3 cp packages.tar.gz s3://${{ secrets.AWS_S3_BUCKET }}/packages.tar.gz --content-type application/x-gzip --content-disposition 'attachment; filename=packages.tar.gz'
      - run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }} --paths '/packages.tar.gz'

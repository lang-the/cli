/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export fn getBinariesPath () str {
  return getHomePath() + path_SEP + "bin"
}

export fn getDependenciesPath () str {
  return getHomePath() + path_SEP + "deps"
}

export fn getHomePath () str {
  return process_home + path_SEP + (os_NAME == "Windows" ? "The" : ".the")
}

export fn getPackagesPath () str {
  return getHomePath() + path_SEP + "packages"
}

export fn initHome (packageAuthor := "") {
  homePath := getHomePath()
  binariesPath := getBinariesPath()
  packagesPath := getPackagesPath()

  if !fs_existsSync(homePath) {
    fs_mkdirSync(homePath)
  }

  if !fs_existsSync(binariesPath) {
    fs_mkdirSync(binariesPath)
  }

  if !fs_existsSync(packagesPath) {
    fs_mkdirSync(packagesPath)
  }

  if !packageAuthor.empty && !fs_existsSync(packagesPath + path_SEP + packageAuthor) {
    fs_mkdirSync(packagesPath + path_SEP + packageAuthor)
  }
}

export fn offlineCompilerPath () str {
  return getBinariesPath() + path_SEP + (os_NAME == "Windows" ? "compiler.exe" : "compiler")
}

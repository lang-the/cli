/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

VERSION_NUM := "0.12.1"
VERSION_NAME := "Submarine Ocean"

main {
  mut args := Args{lineLength: 70}
  defaultOutput := os_name() == "Windows" ? "a.exe" : "a.out"

  args
    .usage("the [options]")
    .usage("the <command> file [options]")

    .command(
      "build",
      "Build source directory into single file",
      default: "."
    )
    .command("compile", "Compile file")
    .command("install", "Add package to your project", alias: "i")
    .command("lex", "Lex file")
    .command("parse", "Parse file")
    .command("run", "Compile and execute file")
    .command("update", "Update package")
    .command(
      "upgrade",
      "Self-upgrade CLI to newest version",
      hasValue: false
    )

    .option(
      "build-dir",
      "Build output directory, by default \"build\"",
      default: "build"
    )
    .option("compiler", "Offline compiler to use instead of cloud servers")
    .option("help", "Print help information", alias: "h", hasValue: false)
    .option(
      "output",
      "Executable output path, by default \"" + defaultOutput + "\"",
      alias: "o",
      default: defaultOutput
    )
    .option(
      "platform",
      "Target platform, one of: linux, macos, windows",
      default: os_name().lower()
    )
    .option("run-args", "Arguments to be passed when running executable")
    .option(
      "the",
      "The Programming Language version, valid formats: latest, 1, 1.1, 1.1.1",
      default: "latest"
    )
    .option("version", "Print version", alias: "v", hasValue: false)

    .example("the -h")
    .example("the --version")
    .example("the build")
    .example("the compile /path/to/file")
    .example("the lex /path/to/file")
    .example("the compile /path/to/file --the=1.0")
    .example("the lex /path/to/file --the=1.0.0")
    .example("the run /path/to/file --platform=macos")
    .example("the update the/args")
    .example("the install the/error@1.0.0")
    .example("the upgrade")

  args.parse()

  mut action := ""
  mut buildDir := ""
  mut compiler := ""
  mut outputPath := ""
  mut packageArgument := ""
  mut platform := ""
  mut runArgs := ""
  mut targetPath := ""
  mut version := ""

  loop i := 0; i < args.data.len; i++ {
    arg := args.data[i]

    if (
      arg.command == "build" ||
      arg.command == "compile" ||
      arg.command == "lex" ||
      arg.command == "parse" ||
      arg.command == "run"
    ) {
      action = arg.command
      targetPath = arg.value
    } elif arg.command == "install" || arg.command == "update" {
      action = arg.command
      packageArgument = arg.value
    } elif arg.command == "upgrade" {
      action = arg.command
    } elif arg.option == "help" || arg.option == "version" {
      action = arg.option
    } elif arg.option == "build-dir" {
      buildDir = arg.value
    } elif arg.option == "compiler" {
      compiler = arg.value
    } elif arg.option == "output" {
      outputPath = fs_isAbsoluteSync(arg.value)
        ? arg.value
        : process_cwd() + "/" + arg.value
    } elif arg.option == "platform" {
      platform = arg.value
    } elif arg.option == "run-args" {
      runArgs = arg.value
    } elif arg.option == "the" {
      version = arg.value
    }
  }

  qs := "?v=" + version + "&p=" + platform

  if action == "build" {
    Builder_build(targetPath, buildDir)
  } elif action == "compile" || action == "lex" || action == "parse" {
    command(compiler, action, targetPath, outputPath, qs)
  } elif action == "help" {
    print(args.help(), terminator: "")
  } elif action == "install" || action == "update" {
    mut packager := Packager_init()

    if action == "install" && packageArgument.empty() {
      packager.installAll()
    } elif action == "install" {
      packager.install(packageArgument)
    } elif action == "update" && packageArgument.empty() {
      packager.updateAll()
    } elif action == "update" {
      packager.update(packageArgument)
    }

    packager.writeLock()
    packager.deinit()
  } elif action == "run" {
    command(compiler, "compile", targetPath, outputPath, qs)

    cmd := outputPath + (runArgs.empty() ? "" : " ") + runArgs
    stdout := process_runSync(cmd)

    fs_rmSync(outputPath)
    print(stdout.str(), terminator: "")
  } elif action == "upgrade" {
    executablePath := os_name() == "Windows"
      ? "C:/Program Files/The/the.exe"
      : "/usr/local/bin/the"
    url := "https://cdn.thelang.io/cli-core-" + os_name().lower()

    mut req := request_open("GET", url])
    res := request_read(ref req)
    request_close(ref req)

    fs_writeFileSync(executablePath, res.data)
    chmodAddSync(executablePath, 0o111)
  } elif action == "version" {
    print("The Programming Language")
    print("Version " + VERSION_NUM + " (" + VERSION_NAME + ")")
    print("Copyright (c) Aaron Delasy")
  }
}

/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import Args from "the/args"
import Packager_init from "./packager"
import PackageYAML_parse from "./package-yaml"
import Runner_init from "./runner"
import Tester_init from "./tester"
import chmodAddSync, mapStr from "./utils"
import command from "./command"
import installOfflineCompiler from "./offline"

const VERSION_NUM := "0.14.13"
const VERSION_NAME := "Tiarin Rise"

main {
  cwd := process_cwd()
  mut args := Args{lineLength: 70}
  defaultOutput := os_NAME == "Windows" ? "a.exe" : "a.out"

  args
    .usage("the [options]")
    .usage("the <command> [<args>] [options]")

    // Commands

    .command(
      "compile",
      "Compiles specified file.",
      synopsis: "the compile <file>",
      examples: [
        "the compile my-file",
      ],
    )

    .command(
      "lex",
      "Converts specified file into tokenized representation.",
      synopsis: "the lex <file>",
      examples: [
        "the lex my-file",
      ],
    )

    .command(
      "offline",
      "Downloads compiler source code and builds it on current machine (requires Git, CMake, and Tar installed).",
      hasValue: false,
      synopsis: "the offline",
      examples: [
        "the offline",
      ],
    )

    .command(
      "parse",
      "Converts specified file into an AST.",
      synopsis: "the parse <file>",
      examples: [
        "the parse my-file",
      ],
    )

    .command(
      "run",
      "Compiles and executes specified file on current machine.",
      synopsis: "the run <file>",
      examples: [
        "the run my-file",
      ],
    )

    .command(
      "script",
      "Executes script from `package.yml`, if script doesn't exist throws error.",
      synopsis: "the script <name>",
      examples: [
        "the script my-script",
      ],
    )

    .command(
      "test",
      "Find and runs tests in specified directory (requires `the/testing` package installed). " +
      "Current working directory is used if directory parameter is not specified. " +
      "Paths ignored by default: `.git`, `.svn`, `thumbs.db`, `.DS_Store`.",
      default: ".",
      synopsis: "the test [directory]",
      examples: [
        "the test",
        "the test .",
        "the test path/to/source",
      ],
    )

    .command(
      "upgrade",
      "Self-upgrades CLI to the latest version.",
      hasValue: false,
      synopsis: "the upgrade",
      examples: [
        "the upgrade",
      ],
    )

    .command(
      "install",
      "Installs specified package and adds it to the `package.yml`. " +
      "Installs all packages if package name was not specified. " +
      "You can specify package version after package name followed by `@` sign.",
      alias: "i",
      synopsis: "the install [package]",
      examples: [
        "the install",
        "the install the/example",
        "the install the/example@latest",
        "the install the/example@1.0.0",
      ],
    )

    .command(
      "uninstall",
      "Uninstalls specified package from the project and removes it from `package.yml`.",
      synopsis: "the uninstall <package>",
      examples: [
        "the uninstall the/example",
      ],
    )

    .command(
      "update",
      "Updates specified package and changes version in package.yml" +
      "Installs all packages if package name was not specified. " +
      "You can specify package version after package name followed by `@` sign.",
      synopsis: "the update [package]",
      examples: [
        "the update",
        "the update the/example",
        "the update the/example@latest",
        "the update the/example@1.0.0",
      ],
    )

    // Options

    .option(
      "arch",
      "Target CPU architecture, one of: arm64, x86_64.",
      default: os_ARCH,
    )

    .option(
      "compiler",
      "Path to offline compiler to be used instead of cloud servers.",
    )

    .option(
      "exclude",
      "Exclude paths separated by comma.",
    )

    .option(
      "help",
      "Print help information.",
      alias: "h",
      hasValue: false,
    )

    .option(
      "output",
      "Executable output path, by default `" + defaultOutput + "`.",
      alias: "o",
      default: defaultOutput,
    )

    .option(
      "platform",
      "Target platform of output executable, one of: linux, macos, windows. " +
      "By default `os_NAME.lower`. " +
      "Doesn't affect output executable when used together with `--compiler` option.",
      default: os_NAME.lower,
    )

    .option(
      "run-args",
      "Arguments that are passed down to executable when executed by `the run` command.",
    )

    .option(
      "the",
      "The programming language version, valid formats: latest, 1, 1.1, 1.1.1. " +
      "Doesn't affect output executable when used together with `--compiler` option.",
      default: "latest",
    )

    .option(
      "version",
      "Print version information.",
      alias: "v",
      hasValue: false,
    )

    .example("the -h")
    .example("the --version")

    .example("the compile /path/to/file")
    .example("the compile /path/to/file --the=1.0")
    .example("the lex /path/to/file")
    .example("the lex /path/to/file --the=1.0.0")
    .example("the run /path/to/file --platform=macos")

    .example("the i")
    .example("the install the/error@1.0.0")
    .example("the update the/args@2")
    .example("the uninstall the/error")

    .example("the offline")
    .example("the upgrade")

  args.parse(process_args)

  mut action := ""
  mut actionArgument := ""
  mut arch := ""
  mut compiler := ""
  mut excludePaths := [".git", ".svn", "thumbs.db", ".DS_Store"]
  mut outputPath := ""
  mut platform := ""
  mut runArgs := ""
  mut version := ""

  loop i := 0; i < args.data.len; i++ {
    arg := args.data[i]

    if (
      arg.command == "compile" ||
      arg.command == "lex" ||
      arg.command == "parse" ||
      arg.command == "run" ||
      arg.command == "test"
    ) {
      action = arg.command
      actionArgument = fs_isAbsoluteSync(arg.value) ? arg.value : cwd + path_SEP + arg.value
    } elif (
      arg.command == "install" ||
      arg.command == "script" ||
      arg.command == "uninstall" ||
      arg.command == "update"
    ) {
      action = arg.command
      actionArgument = arg.value
    } elif arg.command == "offline" {
      action = arg.command
    } elif arg.command == "upgrade" {
      action = arg.command
    } elif arg.option == "help" || arg.option == "version" {
      action = arg.option
    } elif arg.option == "arch" {
      arch = arg.value
    } elif arg.option == "compiler" {
      compiler = arg.value
    } elif arg.option == "exclude" {
      paths := mapStr(arg.value.split(","), (it: str, idx: int) -> str { return it.trim() })
      excludePaths.merge(paths)
    } elif arg.option == "output" {
      outputPath = fs_isAbsoluteSync(arg.value) ? arg.value : cwd + path_SEP + arg.value
    } elif arg.option == "platform" {
      platform = arg.value
    } elif arg.option == "run-args" {
      runArgs = arg.value
    } elif arg.option == "the" {
      version = arg.value
    }
  }

  if action == "help" {
    helpInfo := action.empty ? args.help() : args.help(action)
    print(helpInfo, terminator: "")
    process_exit(0)
  } elif action == "version" {
    print("The Programming Language")
    print("Version", VERSION_NUM, "(" + VERSION_NAME + ")")
    print("Copyright (c) Aaron Delasy")
    process_exit(0)
  }

  mut qs := "?v=" + version
  qs += "&p=" + platform
  qs += (arch.empty ? arch : "&a=" + arch)

  if action == "compile" || action == "lex" || action == "parse" || action == "run" {
    commandAction := action == "run" ? "compile" : action
    mut runner := Runner_init(actionArgument, excludePaths)
    qs += "&m=" + actionArgument.slice(cwd.len + path_SEP.len)
    command(compiler, commandAction, runner.outputDir, outputPath, qs)

    if action == "run" {
      cmd := outputPath + (runArgs.empty ? "" : " " + runArgs)
      stdout := process_runSync(cmd)
      print(stdout.str(), terminator: "")
    }

    runner.deinit()

    if action != "compile" {
      fs_rmSync(outputPath)
    }
  } elif action == "install" || action == "uninstall" || action == "update" {
    mut packager := Packager_init()

    if action == "install" && actionArgument.empty {
      packager.installAll()
    } elif action == "install" {
      packager.install(actionArgument)
    } elif action == "uninstall" && actionArgument.empty {
      throw error_NewError("To uninstall package please specify package id")
    } elif action == "uninstall" {
      packager.uninstall(actionArgument)
    } elif action == "update" && actionArgument.empty {
      packager.updateAll()
    } elif action == "update" {
      packager.update(actionArgument)
    }

    packager.deinit()
  } elif action == "offline" {
    installOfflineCompiler()
  } elif action == "script" {
    packageYAMLPath := cwd + path_SEP + "package.yml"

    if !fs_existsSync(packageYAMLPath) {
      throw error_NewError("File `package.yml` was not found")
    }

    content := fs_readFileSync(packageYAMLPath).str()
    packageYAML := PackageYAML_parse(content)

    if actionArgument.empty {
      print("Available scripts:")
      keys := packageYAML.scripts.keys
      values := packageYAML.scripts.values

      loop i := 0; i < keys.len; i++ {
        print("  " + keys[i] + ": " + values[i])
      }
    } elif !packageYAML.scripts.has(actionArgument) {
      throw error_NewError("Script `" + actionArgument + "` is missing in package.yml")
    } else {
      script := packageYAML.scripts.get(actionArgument)
      stdout := process_runSync(script)
      print(stdout.str(), terminator: "")
    }
  } elif action == "test" {
    mut tester := Tester_init(actionArgument, excludePaths)
    qs += "&m=__the__main__"
    command(compiler, "compile", tester.outputDir, tester.outputPath, qs)

    stdout := process_runSync(tester.outputPath)
    print(stdout.str(), terminator: "")

    tester.deinit()
  } elif action == "upgrade" {
    mut upgradePath := process_home + path_SEP + ".the" + path_SEP + "bin" + path_SEP + "the-upgrade.sh"
    mut upgradeContent := ""

    if os_NAME == "Windows" {
      upgradePath = process_home + path_SEP + "The" + path_SEP + "bin" + path_SEP + "the-upgrade.ps1"

      upgradeContent = "$InstallPath = \"$env:UserProfile\\The\\bin\\the.exe\"" + os_EOL +
        "(New-Object -TypeName System.Net.WebClient).DownloadFile('https://cdn.thelang.io/cli-core-windows', $InstallPath)" + os_EOL +
        "$Acl = Get-Acl -Path $InstallPath" + os_EOL +
        "$AccessRule = New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList Users, Traverse, Allow" + os_EOL +
        "$Acl.SetAccessRule($AccessRule)" + os_EOL +
        "Set-Acl -Path $InstallPath -AclObject $Acl" + os_EOL
    } elif os_NAME == "macOS" {
      upgradeContent = "install_path=\"$HOME/.the/bin/the\"" + os_EOL +
        "cdn_url=\"https://cdn.thelang.io/cli-core-macos-$(uname -m)\"" + os_EOL +
        "curl -fsSL \"$cdn_url\" -o \"$install_path\" || exit 1" + os_EOL +
        "chmod +x \"$install_path\" || exit 1" + os_EOL
    } else {
      upgradeContent := "install_path=\"$HOME/.the/bin/the\"" + os_EOL +
        "  cdn_url=\"https://cdn.thelang.io/cli-core-linux\"" + os_EOL +
        "  curl -fsSL \"$cdn_url\" -o \"$install_path\" || exit 1" + os_EOL +
        "  chmod +x \"$install_path\" || exit 1" + os_EOL
    }

    fs_writeFileSync(upgradePath, upgradeContent.toBuffer())
    chmodAddSync(upgradePath, 0o111)

    if os_NAME == "Windows" {
      process_runSync("start /b powershell \"" + upgradePath + "\" 2>&1 > nul")
    } elif os_NAME == "macOS" {
      process_runSync("\"" + upgradePath + "\" 2>&1 > /dev/null &")
    } else {
      process_runSync("\"" + upgradePath + "\" 2>&1 > /dev/null &")
    }
  }
}

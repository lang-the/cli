/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import Args from "the/args"
import Packager_init from "./packager"
import PackageYAML_parse from "./package-yaml"
import Runner_init from "./runner"
import Tester_init from "./tester"
import chmodAddSync, mapStr from "./utils"
import command from "./command"

const VERSION_NUM := "0.13.3"
const VERSION_NAME := "Enidora"

main {
  mut args := Args{lineLength: 70}
  defaultOutput := os_NAME == "Windows" ? "a.exe" : "a.out"

  args
    .usage("the [options]")
    .usage("the <command> file [options]")

    .command("compile", "Compile file")
    .command("install", "Add package to your project", alias: "i")
    .command("lex", "Lex file")
    .command("parse", "Parse file")
    .command("run", "Compile and execute file")
    .command("script", "Execute script from package.yml")
    .command("test", "Test source directory", default: ".")
    .command("uninstall", "Uninstall package")
    .command("update", "Update package")
    .command("upgrade", "Self-upgrade CLI to newest version", hasValue: false)

    .option("arch", "Target arch, one of: arm64, x86_64", default: os_ARCH)
    .option("compiler", "Offline compiler to use instead of cloud servers")
    .option("exclude", "Exclude paths separated by comma")
    .option("help", "Print help information", alias: "h", hasValue: false)
    .option(
      "output",
      "Executable output path, by default \"" + defaultOutput + "\"",
      alias: "o",
      default: defaultOutput
    )
    .option("platform", "Target platform, one of: linux, macos, windows", default: os_NAME.lower)
    .option("run-args", "Arguments to be passed when running executable")
    .option("the", "The Programming Language version, valid formats: latest, 1, 1.1, 1.1.1", default: "latest")
    .option("version", "Print version", alias: "v", hasValue: false)

    .example("the -h")
    .example("the --version")
    .example("the compile /path/to/file")
    .example("the lex /path/to/file")
    .example("the compile /path/to/file --the=1.0")
    .example("the lex /path/to/file --the=1.0.0")
    .example("the run /path/to/file --platform=macos")
    .example("the update the/args")
    .example("the install the/error@1.0.0")
    .example("the upgrade")

  args.parse(process_args)

  mut action := ""
  mut actionArgument := ""
  mut arch := ""
  mut compiler := ""
  mut excludePaths := [".git", ".svn", "thumbs.db", ".DS_Store"]
  mut outputPath := ""
  mut platform := ""
  mut runArgs := ""
  mut version := ""

  loop i := 0; i < args.data.len; i++ {
    arg := args.data[i]

    if (
      arg.command == "compile" ||
      arg.command == "install" ||
      arg.command == "lex" ||
      arg.command == "parse" ||
      arg.command == "run" ||
      arg.command == "script" ||
      arg.command == "test" ||
      arg.command == "uninstall" ||
      arg.command == "update"
    ) {
      action = arg.command
      actionArgument = fs_isAbsoluteSync(arg.value) ? arg.value : process_cwd() + path_SEP + arg.value
    } elif arg.command == "upgrade" {
      action = arg.command
    } elif arg.option == "help" || arg.option == "version" {
      action = arg.option
    } elif arg.option == "arch" {
      arch = arg.value
    } elif arg.option == "compiler" {
      compiler = arg.value
    } elif arg.option == "exclude" {
      paths := mapStr(arg.value.split(","), (it: str, idx: int) -> str { return it.trim() })
      excludePaths.merge(paths)
    } elif arg.option == "output" {
      outputPath = fs_isAbsoluteSync(arg.value) ? arg.value : process_cwd() + path_SEP + arg.value
    } elif arg.option == "platform" {
      platform = arg.value
    } elif arg.option == "run-args" {
      runArgs = arg.value
    } elif arg.option == "the" {
      version = arg.value
    }
  }

  if action == "help" {
    print(args.help(), terminator: "")
    process_exit(0)
  } elif action == "version" {
    print("The Programming Language")
    print("Version", VERSION_NUM, "(" + VERSION_NAME + ")")
    print("Copyright (c) Aaron Delasy")
    process_exit(0)
  }

  qs := "?v=" + version + "&p=" + platform + (arch.empty ? arch : "&a=" + arch)

  if action == "compile" || action == "lex" || action == "parse" || action == "run" {
    commandAction := action == "run" ? "compile" : action
    mut runner := Runner_init(actionArgument, excludePaths)
    command(compiler, commandAction, runner.inputPath, outputPath, qs)

    cmd := outputPath + (action == "run" && !runArgs.empty ? " " + runArgs : "")
    stdout := process_runSync(cmd)
    print(stdout.str(), terminator: "")

    runner.deinit()
  } elif action == "install" || action == "uninstall" || action == "update" {
    mut packager := Packager_init()

    if action == "install" && actionArgument.empty {
      packager.installAll()
    } elif action == "install" {
      packager.install(actionArgument)
    } elif action == "uninstall" && actionArgument.empty {
      throw error_NewError("To uninstall package please specify package id")
    } elif action == "uninstall" {
      packager.uninstall(actionArgument)
    } elif action == "update" && actionArgument.empty {
      packager.updateAll()
    } elif action == "update" {
      packager.update(actionArgument)
    }

    packager.deinit()
  } elif action == "script" {
    packageYAMLPath := process_cwd() + path_SEP + "package.yml"

    if !fs_existsSync(packageYAMLPath) {
      throw error_NewError("File `package.yml` was not found")
    }

    content := fs_readFileSync(packageYAMLPath).str()
    packageYAML := PackageYAML_parse(content)

    if actionArgument.empty {
      print("Available scripts:")
      keys := packageYAML.scripts.keys
      values := packageYAML.scripts.values

      loop i := 0; i < keys.len; i++ {
        print("  " + keys[i] + ": " + values[i])
      }
    } elif !packageYAML.scripts.has(actionArgument) {
      throw error_NewError("Script `" + actionArgument + "` is missing in package.yml")
    } else {
      script := packageYAML.scripts.get(actionArgument)
      stdout := process_runSync(script)
      print(stdout.str(), terminator: "")
    }
  } elif action == "test" {
    mut tester := Tester_init(actionArgument, excludePaths)
    command(compiler, "compile", tester.inputPath, tester.outputPath, qs)

    stdout := process_runSync(tester.outputPath)
    print(stdout.str(), terminator: "")

    tester.deinit()
  } elif action == "upgrade" {
    mut executablePath := "/usr/local/bin/the"
    mut url := "https://cdn.thelang.io/cli-core-" + os_NAME.lower

    if os_NAME == "Windows" {
      executablePath = "C:/Program Files/The/the.exe"
    } elif os_NAME == "macOS" {
      executablePath = process_home + "/.the/bin/the"
      url = "https://cdn.thelang.io/cli-core-" + os_NAME.lower + "-" + os_ARCH
    }

    mut req := request_open("GET", url)
    res := req.read()
    req.close()

    fs_writeFileSync(executablePath, res.data)
    chmodAddSync(executablePath, 0o111)
  }
}

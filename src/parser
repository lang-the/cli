/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import
  Expression_toText,
  Identifier_toText,
  File,
  FunctionDeclaration,
  ImportDeclaration,
  Program_traverse,
  Statement,
  StringLiteral,
  parse
from "the/parser"

export fn collectTestFunctionNames (path: str) str[] {
  mut file := parse(path)
  mut result: str[]

  Program_traverse(ref file.program, (it: Statement) -> void {
    if !it.isFunctionDeclaration() {
      return
    }

    statement := it.asFunctionDeclaration()
    name := statement.name.name

    if name.slice(0, 5) == "TEST_" {
      result.push(name.slice(5))
    }
  })

  return result
}

export fn collectUsedPaths (paths: str[]) str[] {
  mut result: str[]

  loop i := 0; i < paths.len; i++ {
    file := parse(paths[i])
    dir := path_dirname(paths[i])
    result.push(file.path)

    mut importPaths: str[]

    Program_traverse(ref file.program, (it: Statement) -> void {
      if !it.isImportDeclaration() {
        return
      }

      statement := it.asImportDeclaration()
      sourceLiteral := statement.source.asStringLiteral()
      source := sourceLiteral.value

      if [".", "/"].contains(source.slice(0, 1)) {
        sourcePath := fs_isAbsoluteSync(source) ? source : dir + path_SEP + source
        importPaths.push(sourcePath)
      }
    })

    if !importPaths.empty {
      result.merge(collectUsedPaths(importPaths))
    }
  }

  return result
}

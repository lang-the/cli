/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import
  Expression_toText,
  Identifier_toText,
  File,
  FunctionDeclaration,
  ImportDeclaration,
  Program_traverse,
  Statement
from "the/parser"

export fn collectImportPaths (file: ref File) str[] {
  mut result: str[]

  Program_traverse(file.program, (it: Statement) -> void {
    if !(it.body is ImportDeclaration) {
      return
    }

    statement := it.body as ImportDeclaration
    source := Expression_toText(statement.source)

    if [".", "/"].contains(source.slice(0, 1)) {
      result.push(source)
    }
  })

  return result
}

export fn collectTestFunctionNames (file: ref File) str[] {
  mut result: str[]

  Program_traverse(file.program, (it: Statement) -> void {
    if !(it.body is FunctionDeclaration) {
      return
    }

    statement := it.body as FunctionDeclaration
    name := Identifier_toText(statement.name)

    if name.slice(0, 5) == "TEST_" {
      result.push(name.slice(5))
    }
  })

  return result
}

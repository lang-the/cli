/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

obj PackageYAML {
  mut name: str
  mut description: str
  mut version: str
  mut mainFile: str
  mut packages: str[str]
  mut scripts: str[str]

  fn stringify (self: ref Self) str {
    mut code := ""

    if !self.name.empty {
      code += "name: " + self.name + os_EOL
    }

    if !self.description.empty {
      code += "description: " + self.description + os_EOL
    }

    if !self.version.empty {
      code += "version: " + self.version + os_EOL
    }

    if !self.mainFile.empty {
      code += "main: " + self.mainFile + os_EOL
    }

    if !self.packages.empty {
      code += code.empty ? "" : os_EOL
      code += "packages:" + os_EOL
      mut keys := self.packages.keys
      keys.sort(sortStrAsc)

      loop i := 0; i < keys.len; i++ {
        key := keys[i]
        code += "  " + key + ": " + self.packages.get(key) + os_EOL
      }
    }

    if !self.scripts.empty {
      code += code.empty ? "" : os_EOL
      code += "scripts:" + os_EOL
      mut keys := self.scripts.keys
      keys.sort(sortStrAsc)

      loop i := 0; i < keys.len; i++ {
        key := keys[i]
        code += "  " + key + ": " + self.scripts.get(key) + os_EOL
      }
    }

    return code
  }
}

fn PackageYAML_parse (content: str) PackageYAML {
  mut yaml := YAML_parse(content)
  mut result := PackageYAML{}

  loop yaml.hasNext() {
    node := yaml.next()

    if node is YAMLNodeMapping {
      mappingNode := node
      nodeKey := YAMLNode_stringify(mappingNode.key)

      if nodeKey == "name" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeScalar {
            result.name = YAMLNode_stringify(val)
          } else {
            RaiseError("Property `name` of package.yml expected to be a scalar")
          }
        }
      } elif nodeKey == "description" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeScalar {
            result.description = YAMLNode_stringify(val)
          } else {
            RaiseError("Property `description` of package.yml expected to be a scalar")
          }
        }
      } elif nodeKey == "version" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeScalar {
            result.version = YAMLNode_stringify(val)
          } else {
            RaiseError("Property `version` of package.yml expected to be a scalar")
          }
        }
      } elif nodeKey == "main" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeScalar {
            result.mainFile = YAMLNode_stringify(val)
          } else {
            RaiseError("Property `main` of package.yml expected to be a scalar")
          }
        }
      } elif nodeKey == "packages" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeMap {
            loop i := 0; i < val.mappings.len; i++ {
              mapping := val.mappings[i]
              packageName := YAMLNode_stringify(mapping.key)

              if mapping.value == nil {
                RaiseError("Property `packages[].version` of package.yml is required")
              } else {
                val2 := mapping.value
                if val2 is YAMLNodeScalar {
                  packageVersion := YAMLNode_stringify(val2)
                  result.packages.set(packageName, packageVersion)
                } else {
                  RaiseError("Property `packages[].version` of package.yml expected to be a scalar")
                }
              }
            }
          } else {
            RaiseError("Property `packages` of package.yml expected to be a map")
          }
        }
      } elif nodeKey == "scripts" {
        if mappingNode.value != nil {
          val := mappingNode.value
          if val is YAMLNodeMap {
            loop i := 0; i < val.mappings.len; i++ {
              mapping := val.mappings[i]
              scriptName := YAMLNode_stringify(mapping.key)

              if mapping.value == nil {
                RaiseError("Property `scripts[].value` of package.yml is required")
              } else {
                val2 := mapping.value
                if val2 is YAMLNodeScalar {
                  scriptValue := YAMLNode_stringify(val2)
                  result.scripts.set(scriptName, scriptValue)
                } else {
                  RaiseError("Property `scripts[].value` of package.yml expected to be a scalar")
                }
              }
            }
          } else {
            RaiseError("Property `scripts` of package.yml expected to be a map")
          }
        }
      }
    }
  }

  if result.name.empty {
    RaiseError("Property `name` of package.yml is required")
  } elif result.version.empty {
    RaiseError("Property `version` of package.yml is required")
  }

  return result
}

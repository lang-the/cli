/*!
 * Copyright (c) 2018 Aaron Delasy
 * Licensed under the MIT License
 */

AUTH_TOKEN := "pELerETRaVeYHEne"
ENDPOINT_URL := "https://api.thelang.io"

fn request (url: str, path: str) buffer_Buffer {
  data := fs_readFileSync(path)
  headers := [
    request_Header{name: "authorization", value: AUTH_TOKEN},
    request_Header{name: "content-type", value: "application/octet-stream"}
  ]

  mut req := request_open("POST", url, headers: headers, data: data)
  res := request_read(ref req)
  request_close(ref req)

  return res.data
}

fn customCompile (
  compiler: str,
  action: str,
  filePath: str,
  outputPath: str
) buffer_Buffer {
  isCompile := action == "compile"
  buildDir := process_cwd() + "/build"
  buildDirExisted := fs_existsSync(buildDir)

  if isCompile && !buildDirExisted {
    fs_mkdirSync(buildDir)
  }

  actionArg := isCompile ? "" : " " + action
  stdout := process_runSync(compiler + actionArg + " " + filePath)

  if isCompile && buildDirExisted {
    copyFileSync(buildDir + "/a.out", outputPath)
    fs_rmSync(buildDir + "/a.out")
  } elif isCompile {
    copyFileSync(buildDir + "/a.out", outputPath)
    fs_rmdirSync(buildDir)
  }

  return stdout
}

fn command (
  compiler: str,
  action: str,
  path: str,
  outputPath: str,
  qs: str
) {
  filePath := fs_realpathSync(path)

  if !fs_existsSync(filePath) {
    RaiseError("File '" + filePath + "' does not exists")
  } elif !fs_isFileSync(filePath) {
    RaiseError("Path '" + filePath + "' is not a file")
  }

  if (action == "lex" || action == "parse") && compiler.empty() {
    data := request(ENDPOINT_URL + "/" + action + qs, filePath)
    print(data.str(), terminator: "")
  } elif action == "lex" || action == "parse" {
    data := customCompile(compiler, action, filePath, outputPath)
    print(data.str(), terminator: "")
  } elif action == "compile" && compiler.empty() {
    data := request(ENDPOINT_URL + "/" + action + qs, filePath)
    fs_writeFileSync(outputPath, data)
    chmodAddSync(outputPath, 0o111)
  } elif action == "compile" {
    customCompile(compiler, action, filePath, outputPath)
    chmodAddSync(outputPath, 0o111)
  }
}

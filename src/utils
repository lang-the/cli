/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export fn chmodAddSync (path: str, mode: int) {
  // todo v1.0 - replace with one-liner
  stat := fs_statSync(path)
  fs_chmodSync(path, stat.mode | mode)
}

export fn ensurePathDirectory (path: str) {
  isWin := os_NAME == "Windows"
  paths := path_dirname(path).split(path_SEP)
  mut currentPath := (isWin ? paths[0] : "") + path_SEP

  loop i := isWin ? 1 : 0; i < paths.len; i++ {
    p := paths[i] as str
    if p.empty { continue }
    currentPath += p + path_SEP
    if !fs_existsSync(currentPath) { fs_mkdirSync(currentPath) }
  }
}

export fn excludePaths (paths: str[], exclude: str[]) str[] {
  mut result: str[]

  loop i := paths.len - 1; i >= 0; i-- {
    p := paths[i]
    if !exclude.contains(p) {
      result.push(p)
    }
  }

  return result
}

export fn mapStr (arr: str[], cb: (str, int) -> str) str[] {
  l := arr.len
  mut result := arr
  loop i := 0; i < l; i++ {
    result[i] = cb(result[i], i)
  }
  return result
}

export fn removeDirectorySync (path: str) {
  if os_NAME == "Windows" {
    process_runSync("powershell 'Remove-Item -Recurse -Force \"" + path + "\"'")
  } else {
    process_runSync("rm -rf \"" + path + "\"")
  }
}

export fn scandirDeepSync (path: str) str[] {
  files := fs_scandirSync(path)
  filesLen := files.len
  mut result: str[]

  loop i := 0; i < filesLen; i++ {
    file := files[i] as str
    filePath := path + path_SEP + file
    pathValid := !file.contains(".")

    if pathValid && fs_isFileSync(filePath) {
      result.push(filePath)
    } elif pathValid && fs_isDirectorySync(filePath) {
      result.merge(scandirDeepSync(filePath))
    }
  }

  return result
}

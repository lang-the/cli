/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

export fn chmodAddSync (path: str, mode: int) {
  // todo v1.0 - replace with one-liner
  stat := fs_statSync(path)
  fs_chmodSync(path, stat.mode | mode)
}

export fn ensurePathDirectory (path: str) {
  dir := path_dirname(path)
  if !fs_existsSync(dir) { fs_mkdirSync(dir) }
}

export fn excludePaths (paths: str[], exclude: str[]) str[] {
  mut result: str[]

  loop i := paths.len - 1; i >= 0; i-- {
    p := paths[i]
    if !exclude.contains(p) {
      result.push(p)
    }
  }

  return result
}

export fn mapStr (arr: str[], cb: (str, int) -> str) str[] {
  l := arr.len
  mut result := arr
  loop i := 0; i < l; i++ {
    result[i] = cb(result[i], i)
  }
  return result
}

export fn removeDirectorySync (path: str) {
  entries := fs_scandirSync(path)
  loop i := entries.len - 1; i >= 0; i-- {
    entryPath := path + path_SEP + entries[i]
    if fs_isDirectorySync(entryPath) {
      removeDirectorySync(entryPath)
    } else {
      fs_rmSync(entryPath)
    }
  }
  fs_rmdirSync(path)
}

export fn scandirDeepSync (path: str) str[] {
  files := fs_scandirSync(path)
  filesLen := files.len
  mut result: str[]

  loop i := 0; i < filesLen; i++ {
    file := files[i] as str
    filePath := path + path_SEP + file
    pathValid := !file.contains(".")

    if pathValid && fs_isFileSync(filePath) {
      result.push(filePath)
    } elif pathValid && fs_isDirectorySync(filePath) {
      result.merge(scandirDeepSync(filePath))
    }
  }

  return result
}

/*!
 * Copyright (c) Aaron Delasy
 * Licensed under the MIT License
 */

import collectTestFunctionNames, collectUsedPaths from "./parser"
import ensurePathDirectory, excludePaths, removeDirectorySync, scandirDeepSync from "./utils"

export obj Tester {
  cwd: str
  targetPath: str
  exclude: str[]
  mut inputFile: str
  mut inputPath: str
  mut outputBinary: str
  mut outputDir: str
  mut outputPath: str

  fn init (mut self: ref Self) {
    cwdLen := self.cwd.len
    fullPath := (fs_isAbsoluteSync(self.targetPath) ? "" : self.cwd + path_SEP) + self.targetPath
    realFullPath := fs_realpathSync(fullPath)

    if !fs_existsSync(realFullPath) {
      throw error_NewError("Path '" + realFullPath + "' doesn't exists")
    }

    self.outputDir = path_tempDirectory()
    self.inputFile = "__the_tests_main__"
    self.inputPath = self.outputDir + path_SEP + self.inputFile
    allFiles := fs_isDirectorySync(realFullPath) ? scandirDeepSync(realFullPath) : [realFullPath]
    files := excludePaths(collectUsedPaths(allFiles), self.exclude)
    mut mainFileImports := "import Tests from \"the/testing\"" + os_EOL

    mut mainFile := "main {" + os_EOL +
      "  mut tests := Tests{}" + os_EOL

    loop i := 0; i < files.len; i++ {
      file := files[i] as str
      relativePath := file.slice(cwdLen)
      fnNames := collectTestFunctionNames(file)

      fileContent := "import EXPECT_EQ, EXPECT_FALSE, EXPECT_NO_THROW, " +
        "EXPECT_THROW_WITH_MESSAGE, EXPECT_TRUE from \"the/testing\" " +
        fs_readFileSync(file).str()

      if !fnNames.empty {
        mainFileImports += "import "

        loop j := 0; j < fnNames.len; j++ {
          testName := fnNames[j]
          testFnName := "TEST_" + testName
          mainFileImports += (j == 0 ? "" : ", ") + testFnName
          mainFile += "  tests.register(\"" + testName + "\", " + testFnName + ")" + os_EOL
        }

        mainFileImports += " from \"." + relativePath.replace("\\", "/") + "\"" + os_EOL
      }

      ensurePathDirectory(self.outputDir + relativePath)
      fs_writeFileSync(self.outputDir + relativePath, fileContent.toBuffer())
    }

    mainFile += "  tests.run(process_args)" + os_EOL
    mainFile += "}" + os_EOL

    mainContent := mainFileImports + os_EOL + mainFile
    self.outputBinary = "a." + (os_NAME == "Windows" ? "exe" : "out")
    self.outputPath = self.outputDir + path_SEP + self.outputBinary
    fs_writeFileSync(self.inputPath, mainContent.toBuffer())

    packageYamlPath := self.cwd + path_SEP + "package.yml"

    if fs_existsSync(packageYamlPath) {
      fs_copyFileSync(packageYamlPath, self.outputDir + path_SEP + "package.yml")
    }
  }

  fn deinit (self: ref Self) {
    removeDirectorySync(self.outputDir)
  }
}

export fn Tester_init (targetPath: str, exclude: str[], cwd := process_cwd()) Tester {
  mut result := Tester{
    cwd: cwd,
    targetPath: targetPath,
    exclude: exclude
  }

  result.init()
  return result
}
